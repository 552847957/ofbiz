<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <!--#Bam# portletExample -->
    <!--#Bam# Example methods to test all return Message-->
    <simple-method method-name="createExample" short-description="create a Example and return message">

        <!-- Example of Message management -->
        <if-compare operator="equals" value="EXST_COMPLETE" field="parameters.statusId">
          <!-- prepare a message for success or error message List -->
          <entity-one value-field="statusItem" entity-name="StatusItem" use-cache="true">
            <field-map field-name="statusId" from-field="parameters.statusId"/>
          </entity-one>
          <set field="argListName[]" from-field="statusItem.description"/>
          <property-to-field resource="ExampleUiLabels" property="ExampleMessageExampleStatusIs" field="messageList" arg-list-name="argListName" />
        </if-compare>

        <!-- Now test if Error message -->
        <if-empty field="parameters.exampleTypeId">
          <!-- Error message -->
          <property-to-field resource="ExampleUiLabels" property="ExampleMessageExampleTypeCannotBeEmpty" field="errorMessage"/>
          <if-empty field="messageList">
              <field-to-result field="errorMessage"/>
            <else>
              <!-- <set field="errorMessageList[]" from-field="errorMessage"/> it's not necessary to put it because errorMessage will be print too  -->
              <set field="errorMessageList[]" from-field="messageList"/>
              <field-to-result field="errorMessageList"/>
            </else>
          </if-empty>

          <if-empty field="parameters.description">
              <!-- if there is a success message or messageList put fail, not success. It's should be used if you want to store some entity (so no rollback) 
                  but you want to give a fail(or Warning) message to user -->
              <!-- Currently not specifics look for fail, only error or success  -->
              <set field="responseMessage" value="fail"/>
              <field-to-result field="responseMessage"/>
              <log level="info" message="fail message"/>
              <set field="parameters.exampleTypeId" value="INSPIRED"/>
            <else>
              <return response-code="error"/>
            </else>
          </if-empty>
        </if-empty>

        <!-- Start of Success Message example -->
        <if-compare operator="equals" value="EXST_APPROVED" field="parameters.statusId">
          <!-- return a success message -->
            <property-to-field resource="ExampleUiLabels" property="ExampleMessageCreateExampleIsSuccess" field="successMessage"/>
            <field-to-result field="successMessage"/>
          <else>
            <if-not-empty field="messageList">
              <property-to-field resource="ExampleUiLabels" property="ExampleMessageCreateExampleIsSuccess" field="successMessageList[]"/>
              <set field="successMessageList[]" from-field="messageList"/>
              <field-to-result field="successMessageList"/>
            </if-not-empty>
          </else>
        </if-compare>

        <!-- Now create value -->
        <make-value entity-name="Example" value-field="newEntity"/>
        <sequenced-id sequence-name="Example" field="exampleId"/>
        <log level="info" message="newEntity=${newEntity}"/>
        <set field="newEntity.exampleId" from-field="exampleId"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <create-value value-field="newEntity"/>


        <field-to-result field="exampleId"/>
    </simple-method>
    <!--#Eam# portletExample -->

    <!-- ExampleStatus methods -->
    <simple-method method-name="createExampleStatus" short-description="create a ExampleItem">
        <now-timestamp field="nowTimestamp"/>

        <!-- find the most recent status record and set the statusEndDate -->
        <entity-and entity-name="ExampleStatus" list="oldExampleStatusList">
            <field-map field-name="exampleId" from-field="parameters.exampleId"/>
            <order-by field-name="-statusDate"/>
        </entity-and>
        <first-from-list entry="oldExampleStatus" list="oldExampleStatusList"/>
        <if-not-empty field="oldExampleStatus">
            <set field="oldExampleStatus.statusEndDate" from-field="nowTimestamp"/>
            <store-value value-field="oldExampleStatus"/>
        </if-not-empty>

        <make-value entity-name="ExampleStatus" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set field="newEntity.statusDate" from-field="nowTimestamp"/>
        <create-value value-field="newEntity"/>
    </simple-method>

    <!-- Example ServiceTest Service -->
    <simple-method method-name="testCreateExampleService" short-description="test the create example service" login-required="false">
        <set field="createExampleMap.exampleTypeId" value="CONTRIVED"/>
        <set field="createExampleMap.exampleName" value="Test Example"/>
        <set field="createExampleMap.statusId" value="EXST_IN_DESIGN"/>

        <entity-one entity-name="UserLogin" value-field="createExampleMap.userLogin" auto-field-map="false">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>

        <call-service service-name="createExample" in-map-name="createExampleMap">
            <result-to-field result-name="exampleId" field="exampleId"/>
        </call-service>

        <entity-one entity-name="Example" value-field="example"/>

        <assert>
            <not><if-empty field="example"/></not>
            <if-compare-field field="example.exampleTypeId" to-field="createExampleMap.exampleTypeId" operator="equals"/>
            <if-compare-field field="example.exampleName" to-field="createExampleMap.exampleName" operator="equals"/>
            <if-compare-field field="example.statusId" to-field="createExampleMap.statusId" operator="equals"/>
        </assert>

        <check-errors/>
    </simple-method>
</simple-methods>
